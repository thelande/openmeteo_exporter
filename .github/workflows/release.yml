name: Releases

# Trigger on releases.
on:
  push:
    branches:
      - main
  release:
    types:
      - published
      - edited

permissions:
  contents: write
  packages: write

env:
  PROMU_VER: '0.15.0'

jobs:
  # build_containers:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKERHUB_USERNAME }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}
  #   - name: Set up QEMU
  #     uses: docker/setup-qemu-action@v3
  #     with:
  #       platforms: all
  #   - name: Set up Docker Buildx
  #     id: builder
  #     uses: docker/setup-buildx-action@v3
  #   - name: Build the Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       push: true
  #       platforms: linux/amd64,linux/arm64,linux/arm
  #       tags: thelande/openmeteo_exporter:${{ github.ref_name }},thelande/openmeteo_exporter:latest

  # build_linux:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKERHUB_USERNAME }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}
  #   - name: Set up QEMU
  #     uses: docker/setup-qemu-action@v3
  #     with:
  #       platforms: all
  #   - name: Set up Docker Buildx
  #     id: builder
  #     uses: docker/setup-buildx-action@v3
  #   - name: Build the binaries
  #     run: |
  #       make promu
  #       ~/go/bin/promu crossbuild
  #     shell: bash

  build_windows:
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v3
        with:
          # fetch-depth required for gitversion in `Build` step
          fetch-depth: 0

      - uses: actions/setup-go@v3
        with:
          go-version: '^1.21.1'

      - name: Install Build deps
        run: |
          dotnet tool install --global GitVersion.Tool --version 5.*
          Invoke-WebRequest -Uri https://github.com/prometheus/promu/releases/download/v$($Env:PROMU_VER)/promu-$($Env:PROMU_VER).windows-amd64.zip -OutFile promu-$($Env:PROMU_VER).windows-amd64.zip
          Expand-Archive -Path promu-$($Env:PROMU_VER).windows-amd64.zip -DestinationPath .
          Copy-Item -Path promu-$($Env:PROMU_VER).windows-amd64\promu.exe -Destination "$(go env GOPATH)\bin"

          # No binaries available so build from source
          go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo@v1.4.0
          # GOPATH\bin dir must be added to PATH else the `promu` and `goversioninfo` commands won't be found
          echo "$(go env GOPATH)\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Build
        run: |
          $ErrorActionPreference = "Stop"

          dotnet-gitversion /output json /showvariable FullSemVer | Set-Content VERSION -PassThru
          $Version = Get-Content VERSION
          # Windows versioninfo resources need the file version by parts (but product version is free text)
          $VersionParts = ($Version -replace '^v?([0-9\.]+).*$','$1').Split(".")
          goversioninfo.exe -ver-major $VersionParts[0] -ver-minor $VersionParts[1] -ver-patch $VersionParts[2] -product-version $Version -platform-specific

          make crossbuild
          # '+' symbols are invalid characters in image tags
          (Get-Content -Path VERSION) -replace '\+', '_' | Set-Content -Path VERSION
          make build-all
          # GH requires all files to have different names, so add version/arch to differentiate
          foreach($Arch in "amd64", "arm64", "386") {
            Move-Item output\$Arch\openmeteo_exporter.exe output\openmeteo_exporter-$Version-$Arch.exe
          }

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: openmeteo_exporter_binaries
          path: output\openmeteo_exporter-*.exe

      - name: Build Release Artifacts
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          $ErrorActionPreference = "Stop"
          $BuildVersion = Get-Content VERSION
          $TagName = $env:GITHUB_REF -replace 'refs/tags/', ''
          # The MSI version is not semver compliant, so just take the numerical parts
          $MSIVersion = $TagName -replace '^v?([0-9\.]+).*$','$1'
          foreach($Arch in "amd64", "386") {
            Write-Verbose "Building openmeteo_exporter $MSIVersion msi for $Arch"
            .\installer\build.ps1 -PathToExecutable .\output\openmeteo_exporter-$BuildVersion-$Arch.exe -Version $MSIVersion -Arch "$Arch"
            Move-Item installer\Output\openmeteo_exporter-$MSIVersion-$Arch.msi output\
          }

          promu checksum output\

      - name: Release
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $TagName = $env:GITHUB_REF -replace 'refs/tags/', ''
          Get-ChildItem -Path output\* -Include @('openmeteo_exporter*.msi', 'openmeteo_exporter*.exe', 'sha256sums.txt') | Foreach-Object {gh release upload $TagName $_}
          make push-all
